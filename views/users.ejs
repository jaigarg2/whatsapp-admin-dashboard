<!-- Users Table -->
<div class="row">
    <div class="col-12">
      <div class="card shadow mb-4">
        <div class="card-header py-3 d-flex justify-content-between align-items-center">
          <h6 class="m-0 font-weight-bold text-primary">Admin Users</h6>
          <button type="button" class="btn btn-primary btn-sm" data-bs-toggle="modal" data-bs-target="#createUserModal">
            <i class="fas fa-plus"></i> Add User
          </button>
        </div>
        <div class="card-body">
          <div class="alert-container"></div>
          <div class="table-responsive">
            <table class="table table-bordered table-dashboard" id="users-table" width="100%" cellspacing="0">
              <thead>
                <tr>
                  <th>ID</th>
                  <th>Name</th>
                  <th>Email</th>
                  <th>Role</th>
                  <th>Created On</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody>
                <!-- Table rows will be added here via JavaScript -->
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Create User Modal -->
  <div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="createUserModalLabel">Add New User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="create-user-form">
            <div class="mb-3">
              <label for="user-name" class="form-label">Full Name *</label>
              <input type="text" class="form-control" id="user-name" name="user-name" required>
            </div>
            <div class="mb-3">
              <label for="user-email" class="form-label">Email Address *</label>
              <input type="email" class="form-control" id="user-email" name="user-email" required>
            </div>
            <div class="mb-3">
              <label for="user-password" class="form-label">Password *</label>
              <input type="password" class="form-control" id="user-password" name="user-password" required minlength="6">
              <div class="form-text">Password must be at least 6 characters long.</div>
            </div>
            <div class="mb-3">
              <label for="user-role" class="form-label">Role</label>
              <select class="form-select" id="user-role" name="user-role">
                <option value="operator">Operator</option>
                <option value="admin">Admin</option>
              </select>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="save-user-btn">Add User</button>
        </div>
      </div>
    </div>
  </div>
  
  <!-- Edit User Modal -->
  <div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="editUserModalLabel">Edit User</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <form id="edit-user-form">
            <input type="hidden" id="edit-user-id">
            <div class="mb-3">
              <label for="edit-name" class="form-label">Full Name *</label>
              <input type="text" class="form-control" id="edit-name" name="edit-name" required>
            </div>
            <div class="mb-3">
              <label for="edit-email" class="form-label">Email Address *</label>
              <input type="email" class="form-control" id="edit-email" name="edit-email" required>
            </div>
            <div class="mb-3">
              <label for="edit-role" class="form-label">Role</label>
              <select class="form-select" id="edit-role" name="edit-role">
                <option value="operator">Operator</option>
                <option value="admin">Admin</option>
              </select>
            </div>
            <div class="mb-3">
              <label for="edit-password" class="form-label">New Password</label>
              <input type="password" class="form-control" id="edit-password" name="edit-password" minlength="6">
              <div class="form-text">Leave blank to keep current password. New password must be at least 6 characters long.</div>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-primary" id="update-user-btn">Update User</button>
        </div>
      </div>
    </div>
  </div>
  
  <script>
    $(document).ready(function() {
      // Check authentication
      if (!checkAuth()) return;
      
      // Load users on page load
      loadUsers();
      
      // Handle create user form submission
      $('#save-user-btn').on('click', function() {
        if (validateUserForm()) {
          createUser();
        }
      });
      
      // Handle update user button
      $('#update-user-btn').on('click', function() {
        if (validateEditUserForm()) {
          updateUser();
        }
      });
      
      // Functions
      
      // Load users
      async function loadUsers() {
        try {
          const result = await apiRequest('/api/users');
          
          if (result && result.success) {
            displayUsers(result.data);
          }
        } catch (error) {
          console.error('Error loading users:', error);
          showAlert('Failed to load users', 'danger');
        }
      }
      
      // Display users in table
      function displayUsers(users) {
        const tbody = $('#users-table tbody');
        tbody.empty();
        
        if (users.length === 0) {
          tbody.html('<tr><td colspan="6" class="text-center">No users found</td></tr>');
          return;
        }
        
        users.forEach(user => {
          const row = `
            <tr>
              <td>${user._id.substring(0, 8)}...</td>
              <td>${user.name}</td>
              <td>${user.email}</td>
              <td><span class="badge ${user.role === 'admin' ? 'bg-primary' : 'bg-secondary'}">${formatRole(user.role)}</span></td>
              <td>${formatDate(user.createdAt)}</td>
              <td>
                <button class="btn btn-sm btn-info edit-user" data-id="${user._id}">
                  <i class="fas fa-edit"></i>
                </button>
                <button class="btn btn-sm btn-danger delete-user" data-id="${user._id}">
                  <i class="fas fa-trash"></i>
                </button>
              </td>
            </tr>
          `;
          tbody.append(row);
        });
        
        // Attach event handlers for buttons
        $('.edit-user').on('click', function() {
          const userId = $(this).data('id');
          populateEditUserForm(userId);
        });
        
        $('.delete-user').on('click', function() {
          const userId = $(this).data('id');
          if (confirm('Are you sure you want to delete this user?')) {
            deleteUser(userId);
          }
        });
      }
      
      // Validate user form
      function validateUserForm() {
        const form = $('#create-user-form')[0];
        if (!form.checkValidity()) {
          form.reportValidity();
          return false;
        }
        return true;
      }
      
      // Validate edit user form
      function validateEditUserForm() {
        const form = $('#edit-user-form')[0];
        if (!form.checkValidity()) {
          form.reportValidity();
          return false;
        }
        return true;
      }
      
      // Create new user
      async function createUser() {
        try {
          const name = $('#user-name').val();
          const email = $('#user-email').val();
          const password = $('#user-password').val();
          const role = $('#user-role').val();
          
          const userData = {
            name,
            email,
            password,
            role
          };
          
          const result = await apiRequest('/api/users', 'POST', userData);
          
          if (result && result.success) {
            $('#createUserModal').modal('hide');
            showAlert('User added successfully', 'success');
            loadUsers();
            // Clear form
            $('#create-user-form')[0].reset();
          }
        } catch (error) {
          console.error('Error creating user:', error);
          showAlert('Failed to add user. The email may already be in use.', 'danger');
        }
      }
      
      // Populate edit user form
      async function populateEditUserForm(userId) {
        try {
          const result = await apiRequest(`/api/users/${userId}`);
          
          if (result && result.success) {
            const user = result.data;
            
            $('#edit-user-id').val(user._id);
            $('#edit-name').val(user.name);
            $('#edit-email').val(user.email);
            $('#edit-role').val(user.role);
            $('#edit-password').val(''); // Clear password field
            
            $('#editUserModal').modal('show');
          }
        } catch (error) {
          console.error('Error loading user data:', error);
          showAlert('Failed to load user data', 'danger');
        }
      }
      
      // Update user
      async function updateUser() {
        try {
          const userId = $('#edit-user-id').val();
          const name = $('#edit-name').val();
          const email = $('#edit-email').val();
          const role = $('#edit-role').val();
          const password = $('#edit-password').val();
          
          const userData = {
            name,
            email,
            role
          };
          
          // Only include password if provided
          if (password) {
            userData.password = password;
          }
          
          const result = await apiRequest(`/api/users/${userId}`, 'PUT', userData);
          
          if (result && result.success) {
            $('#editUserModal').modal('hide');
            showAlert('User updated successfully', 'success');
            loadUsers();
          }
        } catch (error) {
          console.error('Error updating user:', error);
          showAlert('Failed to update user', 'danger');
        }
      }
      
      // Delete user
      async function deleteUser(userId) {
        try {
          const result = await apiRequest(`/api/users/${userId}`, 'DELETE');
          
          if (result && result.success) {
            showAlert('User deleted successfully', 'success');
            loadUsers();
          }
        } catch (error) {
          console.error('Error deleting user:', error);
          showAlert('Failed to delete user', 'danger');
        }
      }
      
      // Format role
      function formatRole(role) {
        return role.charAt(0).toUpperCase() + role.slice(1);
      }
    });
  </script>