<!-- Settings Tab Navigation -->
<div class="row mb-4">
    <div class="col-12">
      <ul class="nav nav-tabs" id="settingsTabs" role="tablist">
        <li class="nav-item" role="presentation">
          <button class="nav-link active" id="pricing-tab" data-bs-toggle="tab" data-bs-target="#pricing-tab-pane" type="button" role="tab" aria-controls="pricing-tab-pane" aria-selected="true">Pricing</button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="system-tab" data-bs-toggle="tab" data-bs-target="#system-tab-pane" type="button" role="tab" aria-controls="system-tab-pane" aria-selected="false">System</button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="notification-tab" data-bs-toggle="tab" data-bs-target="#notification-tab-pane" type="button" role="tab" aria-controls="notification-tab-pane" aria-selected="false">Notifications</button>
        </li>
        <li class="nav-item" role="presentation">
          <button class="nav-link" id="chat-tab" data-bs-toggle="tab" data-bs-target="#chat-tab-pane" type="button" role="tab" aria-controls="chat-tab-pane" aria-selected="false">ChatGPT</button>
        </li>
      </ul>
    </div>
  </div>
  
  <!-- Settings Content -->
  <div class="row">
    <div class="col-12">
      <div class="card shadow mb-4">
        <div class="card-body">
          <div class="alert-container"></div>
          <div class="tab-content" id="settingsTabsContent">
            <!-- Pricing Settings -->
            <div class="tab-pane fade show active" id="pricing-tab-pane" role="tabpanel" aria-labelledby="pricing-tab" tabindex="0">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title">Pricing Configuration</h5>
                <button type="button" class="btn btn-primary btn-sm" id="add-pricing-setting-btn">
                  <i class="fas fa-plus"></i> Add Setting
                </button>
              </div>
              <div class="table-responsive">
                <table class="table table-bordered table-dashboard" id="pricing-settings-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Value</th>
                      <th>Description</th>
                      <th>Last Updated</th>
                      <th>Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    <!-- Table rows will be added here via JavaScript -->
                  </tbody>
                </table>
              </div>
            </div>
            
            <!-- System Settings -->
            <div class="tab-pane fade" id="system-tab-pane" role="tabpanel" aria-labelledby="system-tab" tabindex="0">
              <div class="d-flex justify-content-between align-items-center mb-3">
                <h5 class="card-title">System Configuration</h5>
                <button type="button" class="btn btn-primary btn-sm" id="add-system-setting-btn">
                  <i class="fas fa-plus"></i> Add Setting
                </button>
              </div>
              <div class="table-responsive">
                <table class="table table-bordered table-dashboard" id="system-settings-table">
                  <thead>
                    <tr>
                      <th>Name</th>
                      <th>Value</th>
                      <th>Description</th>
                      <th>Last Updated</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Table rows will be added here via JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Notification Settings -->
          <div class="tab-pane fade" id="notification-tab-pane" role="tabpanel" aria-labelledby="notification-tab" tabindex="0">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5 class="card-title">Notification Configuration</h5>
              <button type="button" class="btn btn-primary btn-sm" id="add-notification-setting-btn">
                <i class="fas fa-plus"></i> Add Setting
              </button>
            </div>
            <div class="table-responsive">
              <table class="table table-bordered table-dashboard" id="notification-settings-table">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Value</th>
                    <th>Description</th>
                    <th>Last Updated</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Table rows will be added here via JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
          
          <!-- Chat Settings -->
          <div class="tab-pane fade" id="chat-tab-pane" role="tabpanel" aria-labelledby="chat-tab" tabindex="0">
            <div class="d-flex justify-content-between align-items-center mb-3">
              <h5 class="card-title">ChatGPT Configuration</h5>
              <button type="button" class="btn btn-primary btn-sm" id="add-chat-setting-btn">
                <i class="fas fa-plus"></i> Add Setting
              </button>
            </div>
            <div class="table-responsive">
              <table class="table table-bordered table-dashboard" id="chat-settings-table">
                <thead>
                  <tr>
                    <th>Name</th>
                    <th>Value</th>
                    <th>Description</th>
                    <th>Last Updated</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <!-- Table rows will be added here via JavaScript -->
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Add/Edit Setting Modal -->
<div class="modal fade" id="settingModal" tabindex="-1" aria-labelledby="settingModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="settingModalLabel">Add Setting</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form id="setting-form">
          <input type="hidden" id="setting-id">
          <input type="hidden" id="setting-category">
          
          <div class="mb-3">
            <label for="setting-name" class="form-label">Name *</label>
            <input type="text" class="form-control" id="setting-name" required>
          </div>
          
          <div class="mb-3">
            <label for="setting-value" class="form-label">Value *</label>
            <textarea class="form-control" id="setting-value" rows="3" required></textarea>
            <div class="form-text">For numbers, use simple values. For JSON or arrays, use valid JSON format.</div>
          </div>
          
          <div class="mb-3">
            <label for="setting-description" class="form-label">Description</label>
            <textarea class="form-control" id="setting-description" rows="2"></textarea>
          </div>
          
          <div class="form-check mb-3">
            <input class="form-check-input" type="checkbox" id="setting-active" checked>
            <label class="form-check-label" for="setting-active">
              Active
            </label>
          </div>
        </form>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary" id="save-setting-btn">Save</button>
      </div>
    </div>
  </div>
</div>

<script>
  $(document).ready(function() {
    // Check authentication
    if (!checkAuth()) return;
    
    // Load settings on page load
    loadSettings('pricing');
    
    // Handle tab changes
    $('#settingsTabs button').on('click', function(e) {
      const category = $(this).attr('id').split('-')[0];
      loadSettings(category);
    });
    
    // Handle add setting buttons
    $('#add-pricing-setting-btn').on('click', function() {
      showSettingModal('pricing');
    });
    
    $('#add-system-setting-btn').on('click', function() {
      showSettingModal('system');
    });
    
    $('#add-notification-setting-btn').on('click', function() {
      showSettingModal('notification');
    });
    
    $('#add-chat-setting-btn').on('click', function() {
      showSettingModal('chat');
    });
    
    // Handle save setting button
    $('#save-setting-btn').on('click', function() {
      if (validateSettingForm()) {
        saveSetting();
      }
    });
    
    // Functions
    
    // Load settings by category
    async function loadSettings(category) {
      try {
        const result = await apiRequest(`/api/settings?category=${category}`);
        
        if (result && result.success) {
          displaySettings(result.data, category);
        }
      } catch (error) {
        console.error(`Error loading ${category} settings:`, error);
        showAlert(`Failed to load ${category} settings`, 'danger');
      }
    }
    
    // Display settings in table
    function displaySettings(settings, category) {
      const tbody = $(`#${category}-settings-table tbody`);
      tbody.empty();
      
      if (settings.length === 0) {
        tbody.html(`<tr><td colspan="5" class="text-center">No ${category} settings found</td></tr>`);
        return;
      }
      
      settings.forEach(setting => {
        const isActive = setting.isActive ? 
          '<span class="badge bg-success">Active</span>' : 
          '<span class="badge bg-danger">Inactive</span>';
        
        let displayValue = setting.value;
        if (typeof setting.value === 'object') {
          displayValue = '<code>' + JSON.stringify(setting.value) + '</code>';
        } else if (typeof setting.value === 'boolean') {
          displayValue = setting.value ? 'true' : 'false';
        }
        
        const row = `
          <tr>
            <td>${setting.name} ${isActive}</td>
            <td>${displayValue}</td>
            <td>${setting.description || ''}</td>
            <td>${formatDate(setting.lastUpdated)}</td>
            <td>
              <button class="btn btn-sm btn-info edit-setting" data-id="${setting._id}">
                <i class="fas fa-edit"></i>
              </button>
              <button class="btn btn-sm btn-danger delete-setting" data-id="${setting._id}">
                <i class="fas fa-trash"></i>
              </button>
            </td>
          </tr>
        `;
        tbody.append(row);
      });
      
      // Attach event handlers for buttons
      $('.edit-setting').on('click', function() {
        const settingId = $(this).data('id');
        editSetting(settingId);
      });
      
      $('.delete-setting').on('click', function() {
        const settingId = $(this).data('id');
        if (confirm('Are you sure you want to delete this setting?')) {
          deleteSetting(settingId);
        }
      });
    }
    
    // Show setting modal for adding new setting
    function showSettingModal(category) {
      // Clear form
      $('#setting-form')[0].reset();
      $('#setting-id').val('');
      $('#setting-category').val(category);
      
      // Update modal title
      $('#settingModalLabel').text(`Add ${category.charAt(0).toUpperCase() + category.slice(1)} Setting`);
      
      // Show modal
      $('#settingModal').modal('show');
    }
    
    // Edit setting
    async function editSetting(settingId) {
      try {
        const result = await apiRequest(`/api/settings/${settingId}`);
        
        if (result && result.success) {
          const setting = result.data;
          
          // Populate form
          $('#setting-id').val(setting._id);
          $('#setting-category').val(setting.category);
          $('#setting-name').val(setting.name);
          
          // Format value based on type
          if (typeof setting.value === 'object') {
            $('#setting-value').val(JSON.stringify(setting.value, null, 2));
          } else {
            $('#setting-value').val(setting.value);
          }
          
          $('#setting-description').val(setting.description || '');
          $('#setting-active').prop('checked', setting.isActive);
          
          // Update modal title
          $('#settingModalLabel').text(`Edit ${setting.category.charAt(0).toUpperCase() + setting.category.slice(1)} Setting`);
          
          // Show modal
          $('#settingModal').modal('show');
        }
      } catch (error) {
        console.error('Error loading setting:', error);
        showAlert('Failed to load setting', 'danger');
      }
    }
    
    // Validate setting form
    function validateSettingForm() {
      const form = $('#setting-form')[0];
      if (!form.checkValidity()) {
        form.reportValidity();
        return false;
      }
      
      // Check if value is valid JSON if it looks like JSON
      const value = $('#setting-value').val();
      if (value.trim().startsWith('{') || value.trim().startsWith('[')) {
        try {
          JSON.parse(value);
        } catch (e) {
          showAlert('Invalid JSON format in value field', 'danger');
          return false;
        }
      }
      
      return true;
    }
    
    // Save setting (create or update)
    async function saveSetting() {
      try {
        const settingId = $('#setting-id').val();
        const category = $('#setting-category').val();
        const name = $('#setting-name').val();
        let value = $('#setting-value').val();
        const description = $('#setting-description').val();
        const isActive = $('#setting-active').is(':checked');
        
        // Parse value if it's JSON
        if (value.trim().startsWith('{') || value.trim().startsWith('[')) {
          value = JSON.parse(value);
        } else if (!isNaN(value) && value.trim() !== '') {
          // Convert to number if it's numeric
          value = Number(value);
        } else if (value.toLowerCase() === 'true') {
          value = true;
        } else if (value.toLowerCase() === 'false') {
          value = false;
        }
        
        const settingData = {
          category,
          name,
          value,
          description,
          isActive
        };
        
        let result;
        if (settingId) {
          // Update existing setting
          result = await apiRequest(`/api/settings/${settingId}`, 'PUT', settingData);
        } else {
          // Create new setting
          result = await apiRequest('/api/settings', 'POST', settingData);
        }
        
        if (result && result.success) {
          $('#settingModal').modal('hide');
          showAlert('Setting saved successfully', 'success');
          loadSettings(category);
        }
      } catch (error) {
        console.error('Error saving setting:', error);
        showAlert('Failed to save setting', 'danger');
      }
    }
    
    // Delete setting
    async function deleteSetting(settingId) {
      try {
        const result = await apiRequest(`/api/settings/${settingId}`, 'DELETE');
        
        if (result && result.success) {
          // Determine which category to reload
          const activeTab = $('#settingsTabs button.active').attr('id').split('-')[0];
          showAlert('Setting deleted successfully', 'success');
          loadSettings(activeTab);
        }
      } catch (error) {
        console.error('Error deleting setting:', error);
        showAlert('Failed to delete setting', 'danger');
      }
    }
  });
</script>